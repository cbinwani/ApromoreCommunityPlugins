//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.01.14 at 11:30:43 AM AEDT 
//


package org.apromore.service.logvisualizer.ws.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for VisualizeLogInputMsgType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="VisualizeLogInputMsgType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Log" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *       &lt;attribute name="activities" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="arcs" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "VisualizeLogInputMsgType", propOrder = {
    "log"
})
public class VisualizeLogInputMsgType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Log", required = true)
    protected String log;
    @XmlAttribute(name = "activities")
    protected Double activities;
    @XmlAttribute(name = "arcs")
    protected Double arcs;

    /**
     * Gets the value of the log property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLog() {
        return log;
    }

    /**
     * Sets the value of the log property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLog(String value) {
        this.log = value;
    }

    /**
     * Gets the value of the activities property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getActivities() {
        return activities;
    }

    /**
     * Sets the value of the activities property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setActivities(Double value) {
        this.activities = value;
    }

    /**
     * Gets the value of the arcs property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getArcs() {
        return arcs;
    }

    /**
     * Sets the value of the arcs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setArcs(Double value) {
        this.arcs = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theLog;
            theLog = this.getLog();
            strategy.appendField(locator, this, "log", buffer, theLog);
        }
        {
            Double theActivities;
            theActivities = this.getActivities();
            strategy.appendField(locator, this, "activities", buffer, theActivities);
        }
        {
            Double theArcs;
            theArcs = this.getArcs();
            strategy.appendField(locator, this, "arcs", buffer, theArcs);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof VisualizeLogInputMsgType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final VisualizeLogInputMsgType that = ((VisualizeLogInputMsgType) object);
        {
            String lhsLog;
            lhsLog = this.getLog();
            String rhsLog;
            rhsLog = that.getLog();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "log", lhsLog), LocatorUtils.property(thatLocator, "log", rhsLog), lhsLog, rhsLog)) {
                return false;
            }
        }
        {
            Double lhsActivities;
            lhsActivities = this.getActivities();
            Double rhsActivities;
            rhsActivities = that.getActivities();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activities", lhsActivities), LocatorUtils.property(thatLocator, "activities", rhsActivities), lhsActivities, rhsActivities)) {
                return false;
            }
        }
        {
            Double lhsArcs;
            lhsArcs = this.getArcs();
            Double rhsArcs;
            rhsArcs = that.getArcs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arcs", lhsArcs), LocatorUtils.property(thatLocator, "arcs", rhsArcs), lhsArcs, rhsArcs)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theLog;
            theLog = this.getLog();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "log", theLog), currentHashCode, theLog);
        }
        {
            Double theActivities;
            theActivities = this.getActivities();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activities", theActivities), currentHashCode, theActivities);
        }
        {
            Double theArcs;
            theArcs = this.getArcs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arcs", theArcs), currentHashCode, theArcs);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
