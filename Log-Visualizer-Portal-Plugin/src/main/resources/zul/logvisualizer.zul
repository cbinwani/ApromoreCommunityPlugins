<!--
  ~ Copyright Â© 2009-2018 The Apromore Initiative.
  ~
  ~ This file is part of "Apromore".
  ~
  ~ "Apromore" is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ "Apromore" is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty
  ~ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.
  ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<?component name="menuitem" extends="menuitem" autocheck="true" checkmark="true" ?>
<window id="win" width="100%" height="100%" sizable="true" maximizable="true" closable="true" position="center" title="Log Visualizer" contentStyle="overflow:auto">
    <caption sclass="mainCaption">
        <a href="http://apromore.org/platform/features/discover-process-map" target="_blank" sclass="captionButtons">
            <button label="Help" image="img/Help-16x16.png" style="float: right;" height="25px"></button>
        </a>
    </caption>


    <style>
        .mainCaption {
        display: flex;
        }

        .mainCaption .z-caption-content {
        display: flex; flex-grow: 1;
        }

        .mainCaption .z-caption-content > .captionButtons {
        display: inline-block;
        flex-grow: 1;
        text-align: right;
        margin-right: 1px;
        }

        .captionButton {
        font-size: 18px;
        margin: 0px 0px 0px -1px;
        padding: 2px 6px;
        border: 1px solid #cfcfcf;
        color: #636363;
        }
    </style>
    <vbox>
        <grid>
            <columns>
                <column width="10%"/>
                <column width="75%"/>
                <column width="15%"/>
            </columns>
            <rows>
                <row>
                    <label>Activities</label>
                    <slider id="slider1" mold="scale" maxpos="100" width="100%" curpos="100"/>
                    <textbox id="textbox1" value="100"/>
                </row>
                <row>
                    <label>Arcs</label>
                    <slider id="slider2" mold="scale" maxpos="100" width="100%" curpos="0"/>
                    <textbox id="textbox2" value="0"/>
                </row>
            </rows>
        </grid>
        <grid>
            <columns>
                <column width="20%"/>
                <column width="20%"/>
                <column width="20%"/>
                <column width="20%"/>
                <column width="20%"/>
                <column width="20%"/>
            </columns>
            <rows>
                <row align="center">
                    <combobutton id="frequency" label="Frequency">
                        <menupopup>
                            <menuitem id="absolute_frequency" label="Absolute" checked="true" onCheck='max_frequency.setChecked(false);min_frequency.setChecked(false)' />
                            <menuitem id="max_frequency" label="Max" onCheck='absolute_frequency.setChecked(false);min_frequency.setChecked(false)' />
                            <menuitem id="min_frequency" label="Min" onCheck='max_frequency.setChecked(false);absolute_frequency.setChecked(false)' />
                        </menupopup>
                    </combobutton>
                    <combobutton id="duration" label="Performance">
                        <menupopup>
                            <menuitem id="total_duration" label="Absolute" checked="true" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
                            <menuitem id="median_duration" label="Avg" onCheck='total_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
                            <menuitem id="mean_duration" label="Median" onCheck='median_duration.setChecked(false);total_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
                            <menuitem id="max_duration" label="Max" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);total_duration.setChecked(false);min_duration.setChecked(false)' />
                            <menuitem id="min_duration" label="Min" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);total_duration.setChecked(false)' />
                        </menupopup>
                    </combobutton>
                    <combobutton id="layout" label="Layout">
                        <menupopup>
                            <menuitem id="logvisualizer_layout_dagre" onClick='Clients.evalJavaScript("layout()")' label="Dagre" checked="true" onCheck='logvisualizer_layout_cola.setChecked(false)' />
                            <menuitem id="logvisualizer_layout_cola" onClick='Clients.evalJavaScript("layout_cola()")' label="Cola" onCheck='logvisualizer_layout_dagre.setChecked(false)' />
                        </menupopup>
                    </combobutton>
                    <combobutton id="export" label="Export Log">
                        <menupopup>
                            <menuitem id="exportFitted" onClick='Clients.evalJavaScript("exportFitted()")' label="filter on Activities and Arcs" />
                            <menuitem id="exportUnfitted" onClick='Clients.evalJavaScript("exportUnfitted()")' label="filter on Activity Only" />
                        </menupopup>
                    </combobutton>
                    <button id="download_pdf" onClick='Clients.evalJavaScript("downloadPDF()")' label="Download" />
                    <button id="animate" onClick='Clients.evalJavaScript("animate()")' label="Animate" />
                </row>
            </rows>
        </grid>
        <n:div id="myDiagramDiv" xmlns:n="native" style="height:80vh; width:100vh" />
        <script src="https://unpkg.com/jspdf@latest/dist/jspdf.min.js"></script>
        <script type="text/javascript">
            <![CDATA[
            var diagram;
            var removed_activities = [];

            function init() {

                diagram = cytoscape({
                    container: document.getElementById('myDiagramDiv'), // container to render in
                    layout: {name: 'dagre', padding: 10},
                    zoom: 1,
                    minZoom: 1e-50,
                    maxZoom: 1e50,
                    zoomingEnabled: true,
                    userZoomingEnabled: true,
                    panningEnabled: true,
                    userPanningEnabled: true,
                    wheelSensitivity: 0.1,

                    style: cytoscape.stylesheet()
                        .selector('node').css({
                            'shape': 'data(shape)',
                            'width': 'data(width)',
                            'height': 'data(height)',
                            'background-color': 'data(color)',
                            'content': 'data(name)',
                            'text-wrap': 'wrap',
                            'text-valign': 'center',
                            'text-max-width': 'data(textwidth)',
                            'font-size': 7,
                            'text-border-width': 10,
                            'padding': 5
                        }).selector(':selected').css({
                            'border-width': 3,
                            'border-color': '#333'
                        }).selector('edge').css({
                            'curve-style': 'bezier',
                            'opacity': 1,
                            'width': 'mapData(strength, 0, 100, 1, 6)',
                            'target-arrow-shape': 'triangle',
                            'source-arrow-shape': '',
                            'color': 'data(color)',
                            'line-color': 'data(color)',
                            'source-arrow-color': 'data(color)',
                            'target-arrow-color': 'data(color)',
                            'label': 'data(label)',
                            'line-style': 'data(style)',
                            'font-size': 7,
                            'text-margin-y': -10
                        }).selector('edge.questionable').css({
                            'line-style': 'dotted',
                            'target-arrow-shape': 'diamond'
                        }).selector('.faded').css({
                            'opacity': 0.25,
                            'text-opacity': 0
                        }),

                    elements: {
                        nodes: [],
                        edges: []
                    },

                    ready: function(){
                        window.cy = this;
                    }
                });

                // demo your ext
                diagram.edgeBendEditing({
                    undoable: true,
                });

            }

            function reset() {
                diagram.elements().remove();
            }

            function load(json) {
                console.log("json");
                console.log(json);
                diagram.add($.parseJSON(json));

                cy.on('cxttap', 'edge', function(evt){
                    var source = this.source();
                    var target = this.target();
                    if(source.outgoers('node').length > 1 && target.incomers('node').length > 1) {
                        diagram.remove(this);
                    }
                });
                cy.on('cxttap', 'node', function(evt){
                    if(this.data("name") != "") {
                        removed_activities.push(this.data("name"));
                        console.log(removed_activities);
                        var n = this.connectedEdges();
                        var nLength = n.length;
                        var s = [];
                        var t = [];
                        for (var i = 0; i < nLength; i++) {
                            if(n[i].source().id() != this.id()) s.push(n[i].source());
                            if(n[i].target().id() != this.id()) t.push(n[i].target());
                        }
                        var sLength = s.length;
                        var tLength = t.length;
                        for (var i = 0; i < sLength; i++) {
                            for (var j = 0; j < tLength; j++) {
                                if(s[i].edgesTo(t[j]).length == 0) {
                                    var idi = s[i].id();
                                    var idj = t[j].id();
                                    diagram.add(
                                        { group: "edges",
                                            data:
                                            { strength: 50,
                                                color: "#424242",
                                                style: "solid",
                                                source: idi,
                                                label: "",
                                                target: idj,
                                                id: idi + "x" + idj
                                            }
                                        }
                                    );
                                }
                            }
                        }
                        diagram.remove(this);
                    }
                });
                layout();
            }

            function layout() {
                diagram.elements().layout({"name": 'dagre', zoom: cy.zoom(), pan: cy.pan(), avoidOverlap:true, edgeSep: 2, nodeSep:100, rankSep: 50, rankDir:'LR', edgeWeight: function( edge ){ return 50; }});
            }

            function layout_cola() {
                diagram.elements().layout({"name": 'cola', zoom: cy.zoom(), pan: cy.pan(), randomize:false, avoidOverlap:true, flow:{ axis: 'x', minSeparation: 150 }});
            }

            function downloadPDF() {
                // only jpeg is supported by jsPDF
                var imgData = cy.png({full:true, maxWidth:2970, maxHeight:2100});
                var pdf = new jsPDF('l', 'mm', 'a1');

                pdf.setFontSize(40);
                pdf.text(10, 20, "Powered by Apromore");
                pdf.addImage(imgData, 'PNG', 20, 40, imgData.width, imgData.height);
                pdf.save("download.pdf");
            }

            function rediscover() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onRemoved', json));
            }

            function animate() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onAnimate', json));
            }

            function exportFitted() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$exportFitted'), 'onExport', json));
            }

            function exportUnfitted() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$exportUnfitted'), 'onExport', json));
            }

            zk.afterMount(function() {
                init();
                zAu.send(new zk.Event(zk.Widget.$('$win'), 'onLoaded'));
            });

        ]]>
        </script>
    </vbox>
</window>

